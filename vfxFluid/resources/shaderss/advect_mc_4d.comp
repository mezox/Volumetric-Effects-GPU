/*	Brief:			Mac Cormack advection compute shader
 *	Description:	Advects a multidimensional quantity using velocity field 
 */

#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

// inputs
layout (binding = 0) uniform sampler3D velocity;
layout (binding = 1) uniform sampler3D obstacle;
layout (binding = 2) uniform sampler3D phi_n_1_hat;
layout (binding = 3) uniform sampler3D phi_n_hat;
layout (binding = 4) uniform sampler3D quantity;

// outputs
layout (binding = 0, r16f) uniform image3D outputImage;

// uniform properties
uniform float deltaTime;
uniform float dissipation;
uniform float decay;

ivec3 clampImage (ivec3 position)
{
	ivec3 result;
	result.x = clamp(position.x, 0, int(gl_NumWorkGroups.x * gl_WorkGroupSize.x) - 1);
	result.y = clamp(position.y, 0, int(gl_NumWorkGroups.y * gl_WorkGroupSize.y) - 1);
	result.z = clamp(position.z, 0, int(gl_NumWorkGroups.z * gl_WorkGroupSize.z) - 1);
	return result;
}

void main()
{
	ivec3 position = ivec3(gl_GlobalInvocationID);
	vec4 outputValue = vec4(0);
	vec4 quantitySample = vec4(0);
	
	if (!(texelFetch(obstacle, position, 0).x > 0))
	{
		vec4 velocitySample = texelFetch(velocity, position, 0);
		vec3 backTrackedPosition = position - vec3(velocitySample).xyz * deltaTime;
		vec3 backTrackedCoordinate = (backTrackedPosition + 0.5) / vec3(gl_NumWorkGroups * gl_WorkGroupSize);
	
		ivec3 diff = ivec3(gl_NumWorkGroups * gl_WorkGroupSize) - position - 1;
		int distanceToBoundary = min(position.x, min(position.y, min(position.z, min(diff.x, min(diff.y, diff.z)))));
		
		if (distanceToBoundary > 3)
		{
			quantitySample = texture(phi_n_1_hat, backTrackedCoordinate) + 0.5 * (texelFetch(quantity, position, 0) - texelFetch(phi_n_hat, position, 0));

			ivec3 btPos = ivec3(backTrackedPosition);

			vec4 v0 = texelFetch(quantity, btPos, 0);
			vec4 v1 = texelFetch(quantity, clampImage(btPos + ivec3(0,1,0)), 0);
			vec4 v2 = texelFetch(quantity, clampImage(btPos + ivec3(1,0,0)), 0);
			vec4 v3 = texelFetch(quantity, clampImage(btPos + ivec3(1,1,0)), 0);
			vec4 v4 = texelFetch(quantity, clampImage(btPos + ivec3(0,0,1)), 0);
			vec4 v5 = texelFetch(quantity, clampImage(btPos + ivec3(0,1,1)), 0);
			vec4 v6 = texelFetch(quantity, clampImage(btPos + ivec3(1,0,1)), 0);
			vec4 v7 = texelFetch(quantity, clampImage(btPos + ivec3(1,1,1)), 0);
	
			vec4 minBoundary = min(min(min(v0, v1), min(v2, v3)), min(min(v4, v5), min(v6, v7)));
			vec4 maxBoundary = max(max(max(v0, v1), max(v2, v3)), max(max(v4, v5), max(v6, v7)));

			quantitySample = clamp(quantitySample, minBoundary, maxBoundary);
		}
		else
		{
			quantitySample = texture(quantity, backTrackedCoordinate);
		}
		
		outputValue = max(vec4(0), quantitySample * (1 - dissipation) - deltaTime * decay);
		//outputValue.w = max(velocitySample.w - 0.001, 0);   // decrease reaction counter
	}
	
	imageStore(outputImage, position, outputValue);
}
