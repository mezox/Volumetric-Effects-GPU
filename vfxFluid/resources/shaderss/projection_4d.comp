#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0) uniform sampler3D t_velocity;
layout (binding = 1) uniform sampler3D t_obstacle;
layout (binding = 2) uniform sampler3D t_pressure;

layout (binding = 0, rgba16f) uniform image3D i_velocity_target;

uniform float u_gradient_scale = 1.1;

ivec3 clamp_i (ivec3 i_in) {
	ivec3 res;
	res.x = clamp(i_in.x, 0, int(gl_NumWorkGroups.x * gl_WorkGroupSize.x) -1);
	res.y = clamp(i_in.y, 0, int(gl_NumWorkGroups.y * gl_WorkGroupSize.y) -1);
	res.z = clamp(i_in.z, 0, int(gl_NumWorkGroups.z * gl_WorkGroupSize.z) -1);
	return res;
}

void main() {
	ivec3 pos = ivec3(gl_GlobalInvocationID);
	vec4 target_vel;
	
	vec4 o_c = texelFetch(t_obstacle, pos, 0);
	if(o_c.r > 0) {
		target_vel.xyz = vec3(0);
	}
	else {
		float p_f = texelFetch(t_pressure, clamp_i(pos +ivec3(0, 0, 1)), 0).r;
		float p_b = texelFetch(t_pressure, clamp_i(pos +ivec3(0, 0, -1)), 0).r;
		float p_r = texelFetch(t_pressure, clamp_i(pos +ivec3(1, 0, 0)), 0).r;
		float p_l = texelFetch(t_pressure, clamp_i(pos +ivec3(-1, 0, 0)), 0).r;
		float p_u = texelFetch(t_pressure, clamp_i(pos +ivec3(0, 1, 0)), 0).r;
		float p_d = texelFetch(t_pressure, clamp_i(pos +ivec3(0, -1, 0)), 0).r;
		float p_c = texelFetch(t_pressure, pos, 0).r;
		
		vec4 o_f = texelFetch(t_obstacle, clamp_i(pos +ivec3(0, 0, 1)), 0);
		vec4 o_b = texelFetch(t_obstacle, clamp_i(pos +ivec3(0, 0, -1)), 0);
		vec4 o_r = texelFetch(t_obstacle, clamp_i(pos +ivec3(1, 0, 0)), 0);
		vec4 o_l = texelFetch(t_obstacle, clamp_i(pos +ivec3(-1, 0, 0)), 0);
		vec4 o_u = texelFetch(t_obstacle, clamp_i(pos +ivec3(0, 1, 0)), 0);
		vec4 o_d = texelFetch(t_obstacle, clamp_i(pos +ivec3(0, -1, 0)), 0);
		
		vec3 o_v = vec3(0);
		vec3 v_mask = vec3(1);
		
		if (o_f.r > 0) {p_f = p_c; o_v.z = 0; v_mask.z = 0;}
		if (o_b.r > 0) {p_b = p_c; o_v.z = 0; v_mask.z = 0;}
		if (o_r.r > 0) {p_r = p_c; o_v.x = 0; v_mask.x = 0;}
		if (o_l.r > 0) {p_l = p_c; o_v.x = 0; v_mask.x = 0;}
		if (o_u.r > 0) {p_u = p_c; o_v.y = 0; v_mask.y = 0;}
		if (o_d.r > 0) {p_d = p_c; o_v.y = 0; v_mask.y = 0;}
		
		vec3 source_vel = texelFetch(t_velocity, pos, 0).xyz;
		vec3 grad = vec3(p_r - p_l, p_u - p_d, p_f - p_b) * 0.5;
		vec3 v = source_vel - grad*u_gradient_scale;
		target_vel.xyz = (v * v_mask) + o_v;
	}
	imageStore(i_velocity_target, pos, target_vel);

}