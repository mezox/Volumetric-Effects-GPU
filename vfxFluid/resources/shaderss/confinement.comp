/* Brief:			Vorticity confinement compute shader
 * Description:		Applies vorticity confinement to velocity field
 */

#version 450

// inputs
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (binding = 0) uniform sampler3D velocity;
layout (binding = 1) uniform sampler3D vorticity;

// outputs
layout (binding = 0, rgba16f) uniform image3D velocityImage;

uniform float deltaTime;
uniform float strength;

ivec3 clampImage (ivec3 position)
{
	ivec3 result;
	result.x = clamp(position.x, 0, int(gl_NumWorkGroups.x * gl_WorkGroupSize.x) -1);
	result.y = clamp(position.y, 0, int(gl_NumWorkGroups.y * gl_WorkGroupSize.y) -1);
	result.z = clamp(position.z, 0, int(gl_NumWorkGroups.z * gl_WorkGroupSize.z) -1);
	return result;
}

void main()
{
	ivec3 position = ivec3(gl_GlobalInvocationID);

	// Sample velocity
	vec3 u = texelFetch(velocity, position, 0).xyz;
	
	// Sample vorticity neighbours
	float omegaRight 	= texelFetch(vorticity, clampImage(position + ivec3(1, 0, 0)),	0).w;
	float omegaLeft 	= texelFetch(vorticity, clampImage(position + ivec3(-1, 0, 0)),	0).w;
	float omegaUp 		= texelFetch(vorticity, clampImage(position + ivec3(0, 1, 0)),	0).w;
	float omegaDown 	= texelFetch(vorticity, clampImage(position + ivec3(0, -1, 0)),	0).w;
	float omegaForward 	= texelFetch(vorticity, clampImage(position + ivec3(0, 0, 1)),	0).w;
	float omegaBackward = texelFetch(vorticity, clampImage(position + ivec3(0, 0, -1)),	0).w;
	vec3 vorticity 		= texelFetch(vorticity, position, 0).xyz;
	
	// Compute eta
	vec3 eta = 0.5 * vec3(omegaRight - omegaLeft, omegaUp - omegaDown, omegaForward - omegaBackward);
	eta = normalize(eta + vec3(0.001));
	
	// Compute delta vorticity
	vec3 dv = deltaTime * strength * vec3(	eta.y * vorticity.z - eta.z * vorticity.y,
											eta.z * vorticity.x - eta.x * vorticity.z,
											eta.x * vorticity.y - eta.y * vorticity.x);
	
	u += dv;
	imageStore(velocityImage, position, vec4(u, 0));
}

