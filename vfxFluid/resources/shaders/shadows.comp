#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (binding = 0) uniform sampler3D density;
layout (binding = 1) uniform sampler3D obstacle;
layout (binding = 0, r16f) uniform image3D outputImage;

uniform float step;
uniform float absorbtion;
uniform float jitter;
uniform float factor;
uniform vec3 lightPosition;
uniform float lightIntensity;

// Generates rancom float number from given 3D coordinate
highp float GenerateNumber(vec3 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co, vec3(a,b,c));
    highp float sn= mod(dt, 3.14);
    return fract(sin(sn) * c);
}

// Checks validity of given coordinate
bool IsInside(vec3 coord)
{
	if ((coord.x < 0 || coord.x > 1) ||
		(coord.y < 0 || coord.y > 1) ||
		(coord.z < 0 || coord.z > 1))
	{
		return false;
	}

	return true;
}

// Checks if volume there is obstacle at given coordinate in volume texture
bool IsObstacle(ivec3 position, vec3 coord)
{
	if (texture(obstacle, coord).x > 0.2)
	{
		imageStore(outputImage, position, vec4(0));
		return true;
	}

	return false;
}

void main()
{
	ivec3 position = ivec3(gl_GlobalInvocationID);
	vec3 coord = vec3(position / vec3(gl_NumWorkGroups * gl_WorkGroupSize));
	
	vec3 lightDirection = normalize(lightPosition - coord);

	vec3 traceCoord = coord + mix(-jitter * 0.5, jitter * 0.5, GenerateNumber(coord)) * lightDirection * step;
	
	float lighting = 1.0;
	for (int j = 0; j < 1000; ++j)
	{
		traceCoord += lightDirection * step;

		if (IsObstacle(position, traceCoord)) break;
		if (!IsInside(traceCoord)) break;
		
		vec4 densitySample = texture(density, traceCoord) * factor;
		float densityTotal = (densitySample.x + densitySample.y + densitySample.z);
		if (densityTotal < 0.01)
		{
			continue;
		}

		lighting *= exp(-densityTotal * step * absorbtion);

		if (lighting < 0.01) break;
	}
	
	lighting *= lightIntensity;

	imageStore(outputImage, position, vec4(lighting,0.0,0.0,0.0));
}

